executor {
     perJobMemLimit=true
}
 workDir =    "${baseDir}/../../work"
 tmpDir =     "${baseDir}/../../tmp"

params {
  outdir =    "${baseDir}/../../results"
  reportdir = "${baseDir}/../../reports"

  genomes_base = "/nfs/cellgeni/genomes"
  clusterOptions = false
}

profiles {
  farm4_singularity_gn5 {
    includeConfig './conf/base.config'
    includeConfig './conf/genomes.config'
    includeConfig './conf/singularity_gn5.config'
  }
}

// Capture exit codes from upstream processes when piping
process.shell = ['/bin/bash', '-euo', 'pipefail']

timeline {
  enabled = true
  file = "${params.reportdir}/timeline.html"
}
trace {
  enabled = true
  file = "${params.reportdir}/trace.txt"
}

// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
  if(type == 'memory'){
    try {
      if(obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
        return params.max_memory as nextflow.util.MemoryUnit
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
      return obj
    }
  } else if(type == 'time'){
    try {
      if(obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
        return params.max_time as nextflow.util.Duration
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
      return obj
    }
  } else if(type == 'cpus'){
    try {
      return Math.min( obj, params.max_cpus as int )
    } catch (all) {
      println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
      return obj
    }
  }
}